#! /usr/bin/env node

const nodePath = require('path');
const fs = require('fs');
const denodeify = require('denodeify');
const nodeGlob = require('glob');
const chokidar = require('chokidar');
const program = require('commander');

const glob = denodeify(nodeGlob);
const writeFile = denodeify(fs.writeFile);

const defaultDemoPattern = '/**/demo.js';
const defaultOutputFileLocation = nodePath.resolve('components.js');

program
    .option(
        '--demo-pattern <pattern>',
        'Specify the pattern to match demo files (defaults to ' +
            defaultDemoPattern +
            ')'
    )
    .option(
        '-o, --out <path>',
        'Specify where to write the entry-file (defaults to ' +
            defaultOutputFileLocation +
            ')'
    )
    .option('-w, --watch', 'Watch for file changes and re-generate entry-file')
    .parse(process.argv);

const demoPattern = program.demoPattern || defaultDemoPattern;
const outputFileLocation = program.out || defaultOutputFileLocation;

const paths = program.args.length > 0
    ? program.args.map(resolvePath)
    : [process.cwd()];

if (program.watch) {
    chokidar
        .watch(paths, {
            ignored: /node_modules|android|ios|(^|[\/\\])\../,
            persistent: true,
        })
        .on('all', main);
} else {
    main();
}

function main() {
    Promise.all(paths.map(globDemos))
        .then(flatten)
        .then(generateEntryFile)
        .then(writeFile.bind(null, outputFileLocation))
        .catch(printErrorAndExit);
}

function resolvePath(path) {
    return nodePath.resolve(path);
}

function globDemos(path) {
    return glob(path + demoPattern, {
        ignore: ['**/node_modules/**/*', './android/**/*', './ios/**/*', '.*'],
    });
}

function flatten(array) {
    return Array.prototype.concat.apply([], array);
}

function fileIdentifier(file, i) {
    return 'demo' + i;
}

function importStatement(file, i) {
    const path = nodePath.relative(nodePath.dirname(outputFileLocation), file);
    const relativePath = path[0] !== '.' ? './' + path : path;
    const identifier = fileIdentifier(file, i);

    return 'import ' + identifier + " from '" + relativePath + "';";
}

function generateEntryFile(files) {
    const imports = files.map(importStatement).join('\n');
    const exports = files.map(fileIdentifier).join(',\n');

    const exportStatement = 'export default [\n' + exports + '\n];';

    return [imports, exportStatement].join('\n\n');
}

function printErrorAndExit(error) {
    console.error(error);
    process.exit(1);
}
